std::vector<std::shared_ptr<course>> generateDAG(std::vector<std::string>& target,
                                                 std::vector<float>& target_point,
                                                 std::vector<std::string>& base,
                                                 std::vector<float>& base_point,
                                                 std::vector<std::vector<std::string>>& pre,
                                                 std::vector<std::shared_ptr<course>>& all_base_course);

std::shared_ptr<course> generate_target(std::vector<std::string>& target,
                                        std::vector<float>& target_point,
                                        std::vector<std::vector<std::string>>& pre,
                                        std::string target_this,
                                        float target_point_this,
                                        std::vector<std::string> pre_this,
                                        std::vector<std::shared_ptr<course>>& all_base_course,
                                        std::vector<std::shared_ptr<course>>& all_target_course,
                                        const int& index);

std::vector<std::shared_ptr<schedule>> normal_sort(std::vector<std::shared_ptr<course>>& targetCoursePtrVec, 
                                                   std::vector<std::shared_ptr<course>>& baseCoursePtrVec);

std::vector<std::shared_ptr<schedule>> normal_sort_re(std::shared_ptr<course>& target_this,
                                                      std::shared_ptr<schedule>& targetPostPtr,
                                                      std::vector<schedulePtr>& all_courseSchedule,
                                                      std::vector<schedulePtr>& baseCourseSchedule);

std::vector<std::shared_ptr<schedule>>& check_point(std::vector<std::shared_ptr<schedule>>& course_schedule, 
                                                    float max);